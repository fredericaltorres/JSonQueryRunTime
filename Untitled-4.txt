Changes in Direction
    EMA integration via an NPM package first, then we used a content server

# Uplifting overall process

## About the old Decision Center code.

The old DC was written with different technology
    - Web Form, jQuery, handlebar, React With Flux

Step 1: We extracted the UI code and make it worked outside the monolith.
Using hard code data simulating the api, we could display techniques
and advanced techniques, render report and reproduce user activity, Using
the old code updated.

Step 2: We cleaned the code, moving the report rendering to a first modern
javascript and react architecture. We kept the flux model.

Step 3: We study and document the old rest API embed in EMA and came

Step 4: We updated the already existing API .NET Core project to add the needed Endpoint
and re-use endpoint already existing. We also created an API simulator with NodeJS + Express,
that would return JSON file, to speed up the UI development in case the real API was not ready.
We used the simulator for 4 months after that we stopped as we used the real API code.

Step 5: Integration with EMA via NPM package
We use a feature flag obviously to able to use the old or new Decision Center.
We publish our new code into am NPM package published into the internal eMoney NPM package server.
When the feature flag was on the C# Decision Centre bootstrap page would load to a JavaScript bundle 
that would reference the code in the NPM package.

Step 6: Moving to Redux
Under the direction to Alan Wolfson, we move our code to Redux.
We had to find the training inside the company provided by Vasily X and Alan.
We did hours of pair programming with Alan. Once we understood Redux.

Step 7: Unit test and Jest
One of the key feature of Redux if that we can write a lot of unit test to test the UI.
So we started by assign one team member to learn and experiment with JEST, on spike of one week.
Then this team member would teach the rest of the dev about Jest. Then we all started writing
unit test, the Redux way.

Step 8: UI Automation: Paragraph about Yvon works

Step 9: APIGEE integration. APIGEE integration of the API was done by Foundational Planning and DevOps.
We had to update our code in a small way to support the new standard.
But the main issue for us was that the APIGEE configuration was not stable, we spent a few sprint
where DC was working only 50% of time in test.

Step 10: Build and depoyment
    One more time, we had to learn on our own how to use Jenkins, Bitbucket,
    deal with EMA deployment on DEVINT and the current hardware test system (DEVINT),
    to be able to deploy for testing and production. 
    At first we had to wait 1/2 a day to see the latest change deployed on DEVINT. 
    Once we move to integration with EMA via content server, we were able to merge a PR, 
    build and deploy right away. Thefore a story could be switched from InProgress to 
    Ready for QA instantly.

Step 11: Production deployment
    Our deployment to production include multiple steps
        1) Pushing a new build to the content server, tagging source control for reference and updating EMA 
        2) Moving to next version, increment version in Decision Center and EMA

- At first the process was documented and executed manually. The process took at least 2 hours
mostly because it require to create, approve and merge 2 PR.
- Then we wrote some automation, sharing and re-using code written by Foundational Planning.
The process now takes about 10 minutes to execute.

